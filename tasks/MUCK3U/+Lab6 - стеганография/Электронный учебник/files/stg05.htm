<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Stegnography - Video</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY bgcolor="#EBF4D5" text="#0B0BA6">
<P ALIGN="CENTER"><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=4,0,2,0" width="50" height="70">
    <param name=movie value="button8.swf">
    <param name=quality value=high>
    <param name="BASE" value=".">
    <param name="BGCOLOR" value="#ebf4d5">
    <embed src="button8.swf" base="."  quality=high pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" type="application/x-shockwave-flash" width="50" height="70" bgcolor="#ebf4d5">
    </embed> 
  </object><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=4,0,2,0" width="50" height="70">
    <param name=movie value="button9.swf">
    <param name=quality value=high>
    <param name="BASE" value=".">
    <param name="BGCOLOR" value="#ebf4d5">
    <embed src="button9.swf" base="."  quality=high pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" type="application/x-shockwave-flash" width="50" height="70" bgcolor="#ebf4d5">
    </embed> 
  </object><br>
  <font color="0B0BA6"><b><font color="00790A" size="4" face="Arial, Helvetica, sans-serif">Видеостеганография 
  (методы, сравнительный анализ методов).</font></b></font></P>
<P ALIGN="Justify"><font face="Times New Roman"><b><font size="4">Математические 
  основы методов стеганографии<br>
  </font></b></font><font face="Times New Roman">В зависимости от того, какие 
  цели достигаются стеганографией в каждом конкретном случае (сложность обнаружения 
  или инвариантность к преобразованиям и т.д.), используются различные математические 
  модели в методах стеганографии.</font></p>
  <P ALIGN="JUSTIFY"><font face="Times New Roman">В настоящее время наиболее распространенным, 
  но наименее стойким является метод замены наименьших значащих битов или LSB-метод. 
  Он заключается в использовании погрешности дискретизации, которая всегда существует 
  в оцифрованных изображениях или аудио- и видеофайлах. Данная погрешность равна 
  наименьшему значащему разряду числа, определяющему величину цветовой составляющей 
  элемента изображения (пикселя). Поэтому модификация младших битов в большинстве 
  случаев не вызывает значительной трансформации изображения и не обнаруживается 
  визуально.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Другим популярным методом встраивания 
  сообщений является использование особенностей форматов данных, использующих 
  сжатие с потерей данных (например JPEG). Этот метод (в отличии от LSB) более 
  стоек к геометрическим преобразованиям и обнаружению канала передачи, так как 
  имеется возможность в широком диапазоне варьировать качество сжатого изображения, 
  что делает невозможным определение происхождения искажения.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Для встраивания цифровых водяных 
  знаков используются более сложные методы.</font></P>
<P ALIGN="Justify"><b><font face="Times New Roman" size="4">Скрытие данных в стилизованных 
  изображениях<br>
  </font></b><font face="Times New Roman, Times, serif">Методы сокрытия данных 
  в стилизованных изображениях имеют свои особенности, связанные с особенностями 
  их восприятия человеком. Таким изображения, как правило, имеют, обычно малый 
  объем (200x200 с 8битами глубины). Занимают, обычно около 40Кб. Они могут подвергаться 
  афинным преобразованиям, нелинейным преобразованиям (фильтрация, компрессия 
  с потерями,…). В связи с этим, скрытые данные должны оставаться устойчивыми 
  к данным преобразованиям. При скрытии данных в этих изображениях используют, 
  как правило, различия нашей восприимчивости к контрасту, а также эффект размывания 
  краев объектов (как по яркости, так и по цветности).</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Человек способен различать 30 
  уровней яркости на случайных данных, однако, когда уровень яркости объекта однороден, 
  то человек способен различать до 240 уровней. Если учесть, что CRT дисплеи и 
  многие принтеры имеют ограниченное количество оттенков, то ничего заметно не 
  будет. В данном случае, для скрытия данных иногда применяют просто псевдослучайное 
  изменение уровне яркости изображения.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Другое качество человеческого 
  зрения, которое позволяет скрывать в изображениях данные – относительная нечувствительность 
  к очень малым пространственным частотам, например, к непрерывному изменению 
  яркости вдоль изображения. Создается эффект, что яркость вообще как бы не меняется.</font></P>
<P ALIGN="JUSTIFY"><b><font face="Times New Roman" size="4">Скрытие данных в младших 
  битах<br>
  </font></b><font face="Times New Roman">Предложенный метод данного класса направлен 
  на противодействие удаления данных третьей стороной.</font> </P>
<P ALIGN="JUSTIFY"><b><font face="Times New Roman"> <font size="4">Статистический 
  подход. Метод заплаткок.</font></font></b><font face="Times New Roman"><br>
  Данный подход основывается на псевдослучайном, статистическом процессе. Заплатка 
  невидимо вставляет в изображение некоторый закон распределения, например, нормальный. 
  Выбираются две заплатки A и B. Если пиксели, на которые воздействует закладка 
  A светлеют, то пиксели, на которые воздействует закладка B темнеют. Используемая 
  статистика устанавливает присутствие или отсутствие сигнатуры. Работа метода 
  заплаток не зависит от содержания изображения. Метод устойчив к большинству 
  преобразований.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Сделаем следующие допущения: </font></P>
<ul>
  <li><font face="Times New Roman">Мы работаем с 256-уровневым изображениям (по 
    уровню яркости)<font face="Times New Roman, Times, serif"> </font></font><font face="Times New Roman, Times, serif">0-255.</font></li>
  <li>
    <div align="left"><font face="Times New Roman">Реализации случайного процесса 
      являются независимыми.</font></div>
  </li>
</ul>
<div align="left">
  <p><font face="Times New Roman">Метод заплаток работает следующим образом:</font></p>
</div>
<OL>
  <P ALIGN="JUSTIFY"> 
  <LI><font face="Times New Roman">Случайно берем 2 точки A с яркостью a и B с 
    яркостью b.</font></LI>
  <p></P>
  <P ALIGN="JUSTIFY"> 
  <LI><font face="Times New Roman">Пусть S=a-b. Предполагается, что математическое 
    ожидание величины S=0, то есть – среднее значение по большому числу точек. 
    </font></LI>
  <p></P>
  <P ALIGN="JUSTIFY"> 
  <LI><font face="Times New Roman, Times, serif">Предполагается, что дисперсия 
    величины S очень велика по всему изображению, то есть предположение 2 не дает 
    информации о том, каким будет S в каждой конкретной реализации. (Таким образом, 
    велико среднее квадратичное отклонение s ).</font> 
    <P ALIGN="JUSTIFY"><font face="Times New Roman, Times, serif">Имеем, так как 
      a и b независимые случайные величины, то <IMG SRC="Image27.gif" WIDTH=133 HEIGHT=32 align="absmiddle">. 
      Так как a и b имеют одно распределение, то <IMG SRC="Image28.gif" WIDTH=300 HEIGHT=32 align="absmiddle">для 
      большинства реальных изображений. Следует отметить, что с меньшей дисперсией 
      изображения брать очень не рекомендуется, так как скрываемые данные будут 
      более заметны. Среднее квадратичное отклонение s =104. В этом случае получается, 
      что половина S будет больше 43, а половина – меньше.</font></P>
    <P ALIGN="JUSTIFY"> 
  </LI>
  <LI><font face="Times New Roman">Пусть вышеописанная процедура повторена n раз. 
    Si, ai, bi – значения соответствующих переменных на i-ой итерации.</font></LI>
  <p></P>
  <P ALIGN="JUSTIFY"> 
  <LI><font face="Times New Roman">Будем вычислять <IMG SRC="Image29.gif" WIDTH=208 HEIGHT=50 align="absmiddle">. 
    Ожидаемое значение M(Sn)=n*M(S)=n*0=0. Следовательно, число раз, когда ai&gt;bi 
    приблизительно равно числу раз, когда выполняется обратное условие.</font></LI>
  <p></P>
  <P ALIGN="JUSTIFY"> 
  <LI><font face="Times New Roman">На n-ой итерации дисперсия <IMG SRC="Image30.gif" WIDTH=102 HEIGHT=32 align="absmiddle">. 
    Среднее квадратичное отклонение <IMG SRC="Image31.gif" WIDTH=191 HEIGHT=36 align="absmiddle"></font></LI>
  <font face="Times New Roman, Times, serif">.</font> 
</OL>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Имеем – для заданного конкретного 
  изображения Sn жестко задано для больших n, сколько бы мы его не пересчитывали 
  (n больше 10000). Метод заплаток искусственно изменяет S для заданного изображения, 
  так что Sn` будет довольно сильно отличаться от вычисленного.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Для встраивания данных используется 
  следующий алгоритм.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">1. Используя некоторый <a href="term.htm">ключ</a> 
  (как правило, заданный пользователем), начинаем генерировать пары (ai,bi) с 
  использованием некоторого генератора. <a href="term.htm">Ключ</a> должен быть 
  жестко задан, он же используется и при декодировании, так как при декодировании 
  мы должны попадать в те же самые точки.</font></P>
<OL>
  <P ALIGN="JUSTIFY">
  <LI><font face="Times New Roman, Times, serif">Увеличиваем яркость точки a<SUB>i</SUB> 
    на малое значение d =(1-5).</font></LI>
  <p></P>
  <P ALIGN="JUSTIFY">
  <LI><font face="Times New Roman, Times, serif">Уменьшаем яркость точки bi на 
    малое значение d =(1-5).</font></LI>
  <p></P>
  <P ALIGN="JUSTIFY">
  <LI><font face="Times New Roman">Повторяем процедуру n раз (n больше 10000).</font></LI>
  <p></P>
</OL>
<P ALIGN="JUSTIFY"> <font face="Times New Roman, Times, serif">При декодировании, 
  <IMG SRC="Image32.gif" WIDTH=395 HEIGHT=50 align="absmiddle">. На каждом шаге 
  мы накапливаем ожидание <font color="#000000">2*<IMG SRC="Image33.gif" WIDTH=20 HEIGHT=20 align="absbottom"></font>. 
  После n повторений мат. ожидание <font color="#000000">M(S'n)=0.028*<IMG SRC="Image33.gif" WIDTH=20 HEIGHT=20 align="absbottom"><IMG SRC="Image34.gif" WIDTH=38 HEIGHT=32 align="absbottom"></font>.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">При увеличении n или <IMG SRC="Image33.gif" WIDTH=20 HEIGHT=20 align="absbottom">, 
  будет происходить сдвиг распределения S'n вправо (см. рис.6).</font></P>
<P ALIGN="center"><img src="pic6.gif" width="420" height="164" alt="Распределение сдвигается вправо"><br>
  <font face="Times New Roman, Times, serif" color="#000000">Рис. 6.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Существуют некоторые улучшения 
  данного метода.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">1. Рассматривать враз несколько 
  точек вместо одной Это ведет к сносу шума, вносимого заплаткой в область низких 
  частот и может быть убран. В данной случае повышается устойчивость к сжатию 
  с потерями.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Данный метод является устойчивым 
  к отдельным видам фильтрации.</font></P>
<P ALIGN="left"><font face="Times New Roman"><b>Форма заплатки</b></font><b><font face="Times New Roman"><br>
  </font></b><font face="Times New Roman">На рис. 7 представлены 3 различные формы 
  заплаток, а также форма спектров получаемых с помощью них изображений.</font></P>
<P ALIGN="center"><img src="pic7.gif" width="420" height="447" alt="Форма заплатки во многом определяет какие частоты будут изменяться"><br>
  <font face="Times New Roman, Times, serif" color="#000000">Рис. 7.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">1. Очень коротка заплатка с обрывистыми 
  краями. В данном случае, энергия заплатки будет сконцентрирована в области высоких 
  частот изображения. Это приводит к тому, что искажение будет трудно заметить, 
  но данные будут теряться при сжатии с потерями. </font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">2. У второго типа заплатки энергия 
  в основном сконцентрирована в области низких частот.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">3. У третьего типа заплатки энергия 
  распределения по всему спектру.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Оптимальный выбор формы заплатки 
  зависит от ожидаемых модификаций изображения. Если предполагается JPEG-компрессия, 
  то предпочтительнее 2-ой тип заплатки. Если увеличения контраста, то первый 
  тип. Если вид модификации заранее неизвестен, то лучше – третий тип заплатки.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Ранее, для большинства реальных 
  изображений использовалось <IMG SRC="Image35.gif" WIDTH=41 HEIGHT=32 align="absmiddle"><font color="#000000">=5418</font>. 
  Это значение предлагается использовать, когда требуется анализ большого объема 
  изображений. При возможности, можно пересчитать данный параметр.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman, Times, serif"><b>Недостатки метода 
  заплаток.</b></font></P>
<ol>
  <li><font face="Times New Roman">Очень низкий коэффициент встраивания (отношение 
    объемов реального изображения и встраиваемых данных). Обычно 1%. Это ограничивает 
    круг приложений данного метода, например просто цифровыми водяными знаками.</font></li>
  <li><font face="Times New Roman"> Необходимость определения, где находятся встроенные 
    данные.</font></li>
  <li><font face="Times New Roman"> Все же представляют трудности извлечения данных 
    после трансформации изображения.</font></li>
</ol>
<P ALIGN="Justify"><b><font face="Times New Roman" size="4">Текстурное блоковое кодирование</font><font face="Times New Roman"><br>
  </font></b><font face="Times New Roman">Второй метод для скрытия данных в младших 
  битах – текстурное блоковое кодирование. Этот метод скрывает данные в непрерывных 
  случайных текстурных паттернах изображения. Метод реализуется путем копирования 
  области из случайного текстурного паттерна на картинке в область, которая имеет 
  схожую текстуру. Регионы могут быть найдены следующим образом.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">1. Путем исследования автокорреляционной 
  функции изображения. В данном случае мы будем иметь пики в каждой точке, где 
  идентичные регионы будут перекрываться.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">2. Налагать изображения друг на 
  друга и вычитать их.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Идентичные регионы модифицируются 
  одним способом, если изображение равномерно трансформируется. Для устойчивости 
  к преобразованиям необходимо разумно подбирать размеры копируемых блоков. Предложенный 
  метод устойчив к фильтрации, компрессии повороту при копировании блоков объемом 
  16x16.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Данный метод не лишен и недостатков. 
  Как правило, все же требуется оператор для выбора региона-источника и приемника. 
  Можно конечно автоматизировать данный шаг, привлекая различные методы распознавания 
  образов, однако эта техника будет плохо работать на отдельных изображениях.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman">Дальнейшие исследования в данной 
  области направлены на вырезку только кусков изображения из некоторой области 
  спектра. Это может быть очень полезно для устойчивости к алгоритмам сжатия. 
  Дальнейшие исследования также – на автоматический выбор областей и анализ восприятия, 
  с точки зрения человека, финального результата.</font></P>
<P ALIGN="Justify"><font face="Times New Roman"><b><font size="4">Кодирование 
  высоких яркостей<br>
  </font></b>При использовании данных методов, изменения не воспринимаются визуально, 
  но данные методы, как правило, не устойчивы к преобразованиям изображений. В 
  данных методах можно встроить в <a href="term.htm">контейнер</a> большое количество 
  данных. Наиболее часто используемый метод – замещение малозначимых яркостей 
  изображения вставляемыми данными. Также часто используется метод, внедряющий 
  высокочастотный, низкоамплитудный шум. Для устойчивости к преобразованиям изображений 
  можно в данных методах использовать кодирование с коррекцией ошибок. Данные 
  методы лучше использовать только тогда, когда необходимо данные хорошо защитить 
  от визуального не обнаружения, а устойчивость к преобразованиям не очень требуется. 
  То есть тогда, когда за изображениями – большой контроль со стороны злоумышленников. 
  Наиболее часто используемыми приложениями данных методов являются следующие:</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman"><B>Цифровые водяные знаки</b>
  – установка маркировки на изображение, некоторой подписи, например, для ускорения 
  поиска в интернете, или информации о владельце. Основные требования при этом 
  – трудность уничтожения включенной в изображение информации третьей стороной.</font></P>
<P ALIGN="JUSTIFY"><font face="Times New Roman"><B>Цифровая подпись</b> – (ответ 
  на вопрос, было ли изменено изображение?). Цифровая подпись должна быть устойчива 
  к малым изменениям: масштабированию, уменьшению нелинейных искажений яркости, 
  но не к большим изменениям: удалению или добавлению информации к изображению. 
  Существует несколько методик осуществления этого, например, закодировать контрольную 
  сумму изображения в изображении. Как правило, скрытие осуществляется в специальных 
  паттернах на изображениях, которые нелегко удалить. Поиск такого рода паттернов 
  – перспективная область.</font></P>
<P ALIGN="center"><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=4,0,2,0" width="50" height="70">
    <param name=movie value="button8.swf">
    <param name=quality value=high>
    <param name="BASE" value=".">
    <param name="BGCOLOR" value="#ebf4d5">
    <embed src="button8.swf" base="."  quality=high pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" type="application/x-shockwave-flash" width="50" height="70" bgcolor="#ebf4d5">
    </embed> 
  </object><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=4,0,2,0" width="50" height="70">
    <param name=movie value="button9.swf">
    <param name=quality value=high>
    <param name="BASE" value=".">
    <param name="BGCOLOR" value="#ebf4d5">
    <embed src="button9.swf" base="."  quality=high pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash" type="application/x-shockwave-flash" width="50" height="70" bgcolor="#ebf4d5">
    </embed> 
  </object></P>
</BODY>
</HTML>
